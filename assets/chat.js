(function () {
  const existingLauncher = document.getElementById('ai-chat-launcher');
  if (existingLauncher) return;

  const knowledgeBase = [
    'You are the AI concierge for S-Cleaning Houston, a premium residential and commercial cleaning company serving the Greater',
    'Houston area. Always answer with friendly professionalism, stay concise, and focus on how the team can help. Share prices',
    'as estimates only (standard cleaning starts around $139 for a 1-2 bedroom home, deep cleans from $219, offices quoted by s',
    'quare footage) and invite visitors to call (832) 656-6029, text, or book online for a confirmed quote. Highlight popular p',
    'ackages such as move-in/out, post-construction, and recurring plans, and mention eco-friendly products, background-checks,',
    'and 24-hour re-clean guarantees when relevant. If asked about topics outside cleaning, gently steer back to cleaning servi',
    'ces, or recommend emailing hello@scleaninghouston.com for edge cases. When the visitor shares an address, remind them the',
    'service area covers Houston, Katy, Sugar Land, The Woodlands, Pearland, and surrounding suburbs. Encourage clear next step',
    's like booking, calling, or scheduling a walkthrough. If a request sounds urgent, offer the direct phone number immediately.'
  ].join(' ');

  const panelMarkup = `
    <button id="ai-chat-launcher" class="chat-launcher" aria-haspopup="dialog" aria-controls="ai-chat-panel" aria-expanded="false">
      <span class="sr-only">Open AI cleaning concierge chat</span>
      ðŸ’¬
    </button>
    <section id="ai-chat-panel" class="chat-panel hidden" role="dialog" aria-modal="false" aria-labelledby="ai-chat-title" aria-hidden="true" tabindex="-1">
      <header class="chat-header">
        <div>
          <p id="ai-chat-title" class="chat-title">AI Cleaning Concierge</p>
          <p class="chat-subtitle">Ask about services, quotes, or cleaning tips 24/7.</p>
        </div>
        <div class="chat-header-actions">
          <button id="ai-chat-reset" class="chat-text-button" type="button">Reset</button>
          <button id="ai-chat-settings-toggle" class="chat-text-button" type="button" aria-expanded="false" aria-controls="ai-chat-settings">API Key</button>
          <button id="ai-chat-close" class="chat-close" type="button" aria-label="Close chat">Ã—</button>
        </div>
      </header>
      <div id="ai-chat-settings" class="chat-settings hidden">
        <p class="chat-settings-title">Connect your OpenAI API key</p>
        <p class="chat-settings-copy">Generate a key in the OpenAI dashboard and paste it below. It is stored only on this browser via localStorage.</p>
        <div class="chat-settings-row">
          <input id="ai-chat-api-key" type="password" placeholder="sk-..." autocomplete="off" class="chat-input" />
          <button id="ai-chat-save-key" class="chat-secondary-button" type="button">Save</button>
        </div>
        <button id="ai-chat-clear-key" class="chat-text-button" type="button">Remove saved key</button>
      </div>
      <div id="ai-chat-log" class="chat-log" role="log" aria-live="polite"></div>
      <div id="ai-chat-status" class="chat-status" role="status" aria-live="polite"></div>
      <div id="ai-chat-prompts" class="chat-quick-prompts">
        <p class="chat-prompts-title">Try asking about:</p>
        <div class="chat-prompts-grid" role="list"></div>
      </div>
      <form id="ai-chat-form" class="chat-form">
        <label for="ai-chat-input" class="sr-only">Ask a question</label>
        <textarea id="ai-chat-input" class="chat-textarea" placeholder="Ask about pricing, availability, or cleaning advice..." rows="2" required></textarea>
        <div class="chat-form-actions">
          <button type="submit" class="chat-primary-button">Send</button>
        </div>
      </form>
      <footer class="chat-footer">
        <p>Responses generated by OpenAIâ€™s <span class="chat-code">gpt-4o-mini</span>. Review before sending to clients.</p>
      </footer>
    </section>
  `;

  document.body.insertAdjacentHTML('beforeend', panelMarkup);

  const state = {
    open: false,
    messages: [
      {
        role: 'system',
        content: knowledgeBase,
      },
    ],
    loading: false,
    apiKey: null,
  };

  const launcher = document.getElementById('ai-chat-launcher');
  const panel = document.getElementById('ai-chat-panel');
  const closeButton = document.getElementById('ai-chat-close');
  const form = document.getElementById('ai-chat-form');
  const input = document.getElementById('ai-chat-input');
  const log = document.getElementById('ai-chat-log');
  const status = document.getElementById('ai-chat-status');
  const resetButton = document.getElementById('ai-chat-reset');
  const settingsToggle = document.getElementById('ai-chat-settings-toggle');
  const settingsPanel = document.getElementById('ai-chat-settings');
  const saveKeyButton = document.getElementById('ai-chat-save-key');
  const clearKeyButton = document.getElementById('ai-chat-clear-key');
  const keyInput = document.getElementById('ai-chat-api-key');
  const primaryButton = panel.querySelector('.chat-primary-button');
  const promptContainer = document.getElementById('ai-chat-prompts');
  const promptGrid = promptContainer ? promptContainer.querySelector('.chat-prompts-grid') : null;

  const quickPromptOptions = [
    { label: 'Deep clean pricing for a 3 bed home', prompt: 'How much does a deep cleaning cost for a 3 bedroom, 2 bathroom home in Houston?' },
    { label: 'Availability this week', prompt: 'Do you have cleaning appointments available later this week?' },
    { label: 'Office cleaning checklist', prompt: 'What is included in your commercial office cleaning service?' },
    { label: 'Move-out cleaning prep', prompt: 'Can you help with a move-out cleaning and what should I do to prepare?' },
    { label: 'Recurring service discounts', prompt: 'Do you offer any discounts for bi-weekly or monthly recurring cleanings?' }
  ];

  function renderQuickPrompts() {
    if (!promptGrid) return;
    promptGrid.innerHTML = '';
    quickPromptOptions.forEach(({ label, prompt }) => {
      const button = document.createElement('button');
      button.type = 'button';
      button.className = 'chat-quick-button';
      button.textContent = label;
      button.dataset.prompt = prompt;
      button.setAttribute('role', 'listitem');
      promptGrid.appendChild(button);
    });
  }

  renderQuickPrompts();

  function hideQuickPrompts() {
    if (!promptContainer) return;
    promptContainer.classList.add('hidden');
  }

  function showQuickPrompts() {
    if (!promptContainer) return;
    promptContainer.classList.remove('hidden');
  }

  function loadKey() {
    try {
      const stored = window.localStorage.getItem('sch-openai-key');
      if (stored) {
        state.apiKey = stored;
        keyInput.value = stored;
      }
    } catch (error) {
      console.warn('Unable to access localStorage', error);
    }
  }

  function saveKey(key) {
    try {
      if (key) {
        window.localStorage.setItem('sch-openai-key', key);
        state.apiKey = key;
        status.textContent = 'API key saved for this browser.';
      }
    } catch (error) {
      console.warn('Unable to save key', error);
      status.textContent = 'Unable to save key. Your browser may block storage.';
    }
  }

  function clearKey() {
    try {
      window.localStorage.removeItem('sch-openai-key');
    } catch (error) {
      console.warn('Unable to remove key', error);
    }
    state.apiKey = null;
    keyInput.value = '';
    status.textContent = 'Saved API key removed.';
  }

  function toggleSettings() {
    const hidden = settingsPanel.classList.toggle('hidden');
    settingsToggle.setAttribute('aria-expanded', (!hidden).toString());
    if (!hidden) {
      keyInput.focus();
    }
  }

  function setOpen(nextOpen) {
    state.open = typeof nextOpen === 'boolean' ? nextOpen : !state.open;
    panel.classList.toggle('hidden', !state.open);
    launcher.setAttribute('aria-expanded', state.open.toString());
    panel.setAttribute('aria-hidden', (!state.open).toString());
    if (state.open) {
      panel.focus();
      if (!log.children.length) {
        showQuickPrompts();
        appendMessage({
          role: 'assistant',
          content: 'Hi! Iâ€™m the AI concierge for S-Cleaning Houston. Use the quick prompts below or ask about pricing, availability, or which cleaning package fits best. Prefer to chat with a human? Call (832) 656-6029 any time.',
        });
      }
    }
  }

  function setLoading(isLoading) {
    state.loading = isLoading;
    primaryButton.disabled = isLoading;
    input.disabled = isLoading;
    panel.setAttribute('aria-busy', isLoading.toString());
    if (isLoading) {
      status.textContent = 'Working on a response...';
      primaryButton.textContent = 'Sendingâ€¦';
    } else {
      status.textContent = '';
      primaryButton.textContent = 'Send';
    }
  }

  function appendMessage(message) {
    state.messages.push(message);
    if (message.role !== 'system') {
      const bubble = document.createElement('div');
      bubble.className = `chat-bubble ${message.role === 'user' ? 'chat-bubble-user' : 'chat-bubble-assistant'}`;
      const safeHtml = escapeHtml(message.content).replace(/\n/g, '<br>');
      bubble.innerHTML = `<p>${safeHtml}</p>`;
      log.appendChild(bubble);
      log.scrollTop = log.scrollHeight;
      if (message.role === 'user') {
        hideQuickPrompts();
      }
    }
  }

  function resetConversation() {
    state.messages = [state.messages[0]];
    log.innerHTML = '';
    status.textContent = 'Conversation cleared.';
    showQuickPrompts();
  }

  function escapeHtml(unsafe) {
    return unsafe
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#039;');
  }

  async function requestCompletion(prompt) {
    if (!state.apiKey) {
      status.textContent = 'Add your OpenAI API key in the chat settings to enable AI responses.';
      if (prompt) {
        input.value = prompt;
      }
      if (settingsPanel.classList.contains('hidden')) {
        toggleSettings();
      }
      return;
    }

    appendMessage({ role: 'user', content: prompt });
    setLoading(true);

    try {
      const payload = {
        model: 'gpt-4o-mini',
        temperature: 0.7,
        messages: state.messages,
      };

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${state.apiKey}`,
        },
        body: JSON.stringify(payload),
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(errorText || 'Unable to fetch response');
      }

      const data = await response.json();
      const message = data.choices?.[0]?.message?.content?.trim();

      if (message) {
        appendMessage({ role: 'assistant', content: message });
      } else {
        status.textContent = 'The AI returned an empty response. Try asking again.';
      }
    } catch (error) {
      console.error('Chat error', error);
      status.textContent = 'We hit a snag reaching OpenAI. Check your API key, usage limits, or internet connection.';
    } finally {
      setLoading(false);
    }
  }

  launcher.addEventListener('click', () => setOpen(!state.open));
  closeButton.addEventListener('click', () => setOpen(false));
  resetButton.addEventListener('click', resetConversation);
  settingsToggle.addEventListener('click', toggleSettings);
  if (promptGrid) {
    promptGrid.addEventListener('click', (event) => {
      const target = event.target.closest('button[data-prompt]');
      if (!target) return;
      const prompt = target.dataset.prompt;
      if (!prompt || state.loading) {
        return;
      }
      requestCompletion(prompt);
    });
  }
  saveKeyButton.addEventListener('click', () => {
    const key = keyInput.value.trim();
    if (!key) {
      status.textContent = 'Enter a valid key before saving.';
      return;
    }
    saveKey(key);
  });
  clearKeyButton.addEventListener('click', clearKey);

  form.addEventListener('submit', (event) => {
    event.preventDefault();
    if (state.loading) return;
    const prompt = input.value.trim();
    if (!prompt) {
      status.textContent = 'Type a question to get started.';
      return;
    }
    input.value = '';
    requestCompletion(prompt);
  });

  input.addEventListener('keydown', (event) => {
    if (event.key === 'Enter' && !event.shiftKey && !event.isComposing) {
      event.preventDefault();
      form.requestSubmit();
    }
  });

  panel.addEventListener('keydown', (event) => {
    if (event.key === 'Escape') {
      setOpen(false);
      launcher.focus();
    }
  });

  loadKey();
})();
